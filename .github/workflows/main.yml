# run tests manually in the Actions-tab of the project
name: Trigger Tests Manually
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      DINOSAUR:
        description: 'Creature that is expected to be dinosaur:'
        # Default value if no value is explicitly provided
        default: achillobator
        # Input has to be provided for the workflow to run
        required: true
      NOT_DINOSAUR:
        description: 'Creature that is not a dinosaur:'
        # Default value if no value is explicitly provided
        default: dog
        # Input has to be provided for the workflow to run
        required: true
      tag:
        description: 'Tag for tests to run. Use "*" to run all'
        # Default value if no value is explicitly provided
        default: dinosaur
        # Input has to be provided for the workflow to run
        required: true

permissions:
  contents: read
  actions: read
  checks: write

jobs:
    introduction:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4

          - name: Introduction
            run: sleep 30
    
    ci:
        runs-on: ubuntu-latest
        needs: [introduction]
        steps:
          - uses: actions/checkout@v4

          - name: CI
            run: sleep 30

    run_test:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ["3.9"]
      # container: node:10.18-jessie
      services:
        postgres:
          image: postgres
          env:
            POSTGRES_PASSWORD: postgres
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
            cache: 'pip' # caching pip dependencies
        - name: Run image
          uses: CfirTsabari/actions-pipx@v1
        - name: virtualenv install
          run: pipx install virtualenv
        - name: virtualenv help
          run: virtualenv --help
        - name: Setup PHP with PECL extension
          uses: shivammathur/setup-php@v2
          with:
            php-version: '8.0'
        - name: php version
          run: php -v
        - name: psql version
          run: psql --version
        - name: vir
          run: virtualenv omdevtools
        - name: t
          run: . omdevtools/bin/activate
        # - name: wget
        #   run: wget https://dist.atreal.fr/public/pip3-requirements.txt -O tests/pip3-requirements.txt
        - name: install requirement
          run: pip install -r tests/pip${py}-requirements.txt
        - name: cd test
          working-directory: tests
          run: echo ''
        - name: g
          run: xvfb-run -a --server-args=-screen\ 0\ 1680x1050x24 om-tests -c runall
        - name: sleep
          run: sleep 65


    # run_tests:
    #     runs-on: ubuntu-latest
    #     needs: [ci]
    #     steps:
    #     - uses: actions/checkout@v2
    #     - name: Create folder for reports
    #       run: mkdir reports
    #     - name: Run Robot Framework Tests
    #       run: |
    #         docker run \
    #           -v ${PWD}/openads/reports:/opt/robotframework/reports:Z \
    #           -v ${PWD}/openads/tests:/opt/robotframework/tests:Z \
    #           -e ROBOT_OPTIONS="--variable DINOSAUR:${{ github.event.inputs.DINOSAUR }} --variable NOT_DINOSAUR:${{ github.event.inputs.NOT_DINOSAUR }} --include ${{ github.event.inputs.tag }}" \
    #           --user $(id -u):$(id -g) \
    #           ppodgorsek/robot-framework:latest
    #     - name: Upload reports
    #       uses: actions/upload-artifact@v1
    #       if: always()
    #       with:
    #         name: reports
    #         # set path to Robot Framework results reports. Exclude dummy file that is needed because of ppodgorsek image priviledges.
    #         path: ${{ github.workspace }}/reports
        
    #     - name: Release
    #       id: release
    #       run: |
    #         git config --global user.email "github-actions[bot]@users.noreply.github.com"
    #         git config --global user.name "github-actions[bot]"
    #         git tag -a ${{ github.event.inputs.DINOSAUR }} -m "version du mod"
    #         echo "VERSION=${{ github.event.inputs.DINOSAUR }}" >> "$GITHUB_OUTPUT"

    #     - name: Push Tag
    #       run: git push --follow-tags
        
    #     - name: Push Release
    #       uses: ncipollo/release-action@v1
    #       with:
    #         generateReleaseNotes: true
    #         artifacts: "*"
    #         tag: ${{ steps.release.outputs.VERSION }}
